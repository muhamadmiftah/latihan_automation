{
  "stats": {
    "suites": 1,
    "tests": 7,
    "passes": 7,
    "pending": 0,
    "failures": 0,
    "start": "2024-11-26T06:02:48.089Z",
    "end": "2024-11-26T06:02:50.487Z",
    "duration": 2398,
    "testsRegistered": 7,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "59064631-95f2-4621-b753-dc00cb940980",
      "title": "",
      "fullFile": "D:\\Work\\test_api2\\test\\add.js",
      "file": "\\test\\add.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "d246fd45-dc1e-49e8-a6da-b0fe360a6177",
          "title": "users",
          "fullFile": "D:\\Work\\test_api2\\test\\add.js",
          "file": "\\test\\add.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "GET /users",
              "fullTitle": "users GET /users",
              "timedOut": false,
              "duration": 475,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.get(\"/users\");\n\n// Assertion\nexpect(res.status).to.equal(200);\nexpect(res.body).to.be.an(\"array\");\nconsole.log(res.body);",
              "err": {},
              "uuid": "f622c4df-232c-4d0b-b373-f1a7f5e3fa44",
              "parentUUID": "d246fd45-dc1e-49e8-a6da-b0fe360a6177",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET /users?id",
              "fullTitle": "users GET /users?id",
              "timedOut": false,
              "duration": 208,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const userId = 7543746; // Ganti dengan ID yang valid\nconst res = await request.get(`/users?id=${userId}`);\n    \nconsole.log(\"Status:\", res.status);\nconsole.log(\"Response Body:\", res.body);\n    \n// Tangani jika respons kosong\nif (res.body.length === 0) {\n    console.warn(`No users found with id=${userId}`);\n} else {\n    // Periksa apakah respons berupa array atau objek\n    if (Array.isArray(res.body)) {\n        expect(res.body).to.be.an(\"array\").that.is.not.empty;\n        expect(res.body[0]).to.have.property(\"id\", userId); // Periksa ID pertama dalam array\n    } else {\n        expect(res.body).to.be.an(\"object\").that.has.property(\"id\");\n        expect(res.body.id).to.equal(userId);\n    }\n}",
              "err": {},
              "uuid": "3866ed9e-e032-4961-94ce-200e5c97a842",
              "parentUUID": "d246fd45-dc1e-49e8-a6da-b0fe360a6177",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET /users?gender",
              "fullTitle": "users GET /users?gender",
              "timedOut": false,
              "duration": 398,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usersgender = \"female\"; // Contoh gender\nconst res = await request.get(`/users?gender=${usersgender}`);\n\n// Log respons untuk debugging\nconsole.log(res.body);\n// Periksa status kode\nexpect(res.status).to.equal(200);\n// Periksa apakah respons berupa array atau objek\nif (Array.isArray(res.body)) {\n    expect(res.body).to.be.an(\"array\").that.is.not.empty;\n} else {\n    expect(res.body).to.be.an(\"object\").that.has.property(\"id\");\n    expect(res.body.id).to.equal(usersgender);\n}",
              "err": {},
              "uuid": "b12ca06d-8e1a-45bf-ad24-35c3a087b370",
              "parentUUID": "d246fd45-dc1e-49e8-a6da-b0fe360a6177",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET /users?gender&status",
              "fullTitle": "users GET /users?gender&status",
              "timedOut": false,
              "duration": 240,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usersgender = \"female\"; // Contoh gender\nconst usersstatus = \"active\"; // Contoh status\nconst res = await request.get(`/users?gender=${usersgender}&status=${usersstatus}`);\n\n// Log respons untuk debugging\nconsole.log(\"Response Body:\", res.body);\n// Periksa apakah respons berupa array atau objek\nexpect(res.status).to.equal(200);\nif (res.body.length === 0) {\n    console.warn(\"No users found with the given filters.\");\n} else {\n    expect(res.body).to.be.an(\"array\").that.is.not.empty;\n    res.body.forEach(user => {\n        expect(user).to.have.property(\"gender\", usersgender);\n        expect(user).to.have.property(\"status\", usersstatus);\n    });\n}",
              "err": {},
              "uuid": "c912da1a-a160-43b2-8ffd-bb3cbc007c10",
              "parentUUID": "d246fd45-dc1e-49e8-a6da-b0fe360a6177",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET /users last added",
              "fullTitle": "users GET /users last added",
              "timedOut": false,
              "duration": 377,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.get(\"/users\").set(\"Authorization\", `Bearer ${token}`);\n    \n// Log respons untuk debugging\nconsole.log(\"Response Body:\", res.body);\n    \n// Pastikan respons adalah array\nexpect(res.status).to.equal(200);\nexpect(res.body).to.be.an(\"array\").that.is.not.empty;\n    \n// Cari user dengan ID terbesar\nconst userslastid = res.body.reduce((prev, current) => {\n    return current.id > prev.id ? current : prev;\n});\n    \nconsole.log(\"id User terakhir: \", userslastid);\n    \n// Verifikasi hasil\nexpect(userslastid).to.have.property(\"id\");\nexpect(userslastid).to.have.property(\"name\");",
              "err": {},
              "uuid": "4d550877-3e54-429f-b8cf-28e509eed56e",
              "parentUUID": "d246fd45-dc1e-49e8-a6da-b0fe360a6177",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST /users",
              "fullTitle": "users POST /users",
              "timedOut": false,
              "duration": 377,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const email = `test${Date.now()}@mailservice.com`; // Email unik\n    const name = `Test Pride ${Date.now()}`; //nama unik\n    const data = {\n        email: email,\n        name: name,\n        gender: \"male\",\n        status: \"active\",\n    };\n\n    const res = await request\n        .post(\"/users\")\n        .set(\"Authorization\", `Bearer ${token}`) // Format token yang benar\n        .set(\"Content-Type\", \"application/json\")\n        .send(data);\n\n    console.log(\"Status:\", res.status);\n    console.log(\"Response Body:\", res.body);\n\n    // Verifikasi respons\n    expect(res.status).to.equal(201); // 201 Created\n    expect(res.body).to.have.property(\"id\");\n    expect(res.body.email).to.equal(data.email);\n    expect(res.body.name).to.equal(data.name);\n    expect(res.body.gender).to.equal(data.gender);\n    expect(res.body.status).to.equal(data.status);",
              "err": {},
              "uuid": "19cc961a-a9c8-4ac7-b061-55e2eef8050a",
              "parentUUID": "d246fd45-dc1e-49e8-a6da-b0fe360a6177",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PUT /users/:id",
              "fullTitle": "users PUT /users/:id",
              "timedOut": false,
              "duration": 300,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const name = `Test Pride ${Date.now()}`;\n     const email = `test${Date.now()}@mailservice.com`;\n     const data = {\n         status: \"inactive\",\n         name: name,\n         email: email\n     };\n     \n     const res = await request\n         .put(\"/users/7538600\")\n         .set(\"Authorization\", `Bearer ${token}`) // Format token yang benar\n         .set(\"Content-Type\", \"application/json\")\n         .send(data);\n     \n     console.log(\"Response Body:\", res.body);",
              "err": {},
              "uuid": "7bbad5f0-e678-496b-90b0-35143a335407",
              "parentUUID": "d246fd45-dc1e-49e8-a6da-b0fe360a6177",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f622c4df-232c-4d0b-b373-f1a7f5e3fa44",
            "3866ed9e-e032-4961-94ce-200e5c97a842",
            "b12ca06d-8e1a-45bf-ad24-35c3a087b370",
            "c912da1a-a160-43b2-8ffd-bb3cbc007c10",
            "4d550877-3e54-429f-b8cf-28e509eed56e",
            "19cc961a-a9c8-4ac7-b061-55e2eef8050a",
            "7bbad5f0-e678-496b-90b0-35143a335407"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2375,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}