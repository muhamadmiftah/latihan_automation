{
  "stats": {
    "suites": 1,
    "tests": 8,
    "passes": 8,
    "pending": 0,
    "failures": 0,
    "start": "2024-12-11T10:05:59.942Z",
    "end": "2024-12-11T10:06:02.149Z",
    "duration": 2207,
    "testsRegistered": 8,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "2c0da148-56fa-4fc0-9e29-f1e88e7b0cb2",
      "title": "",
      "fullFile": "D:\\Work\\test_api2\\test\\add.js",
      "file": "\\test\\add.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "2e7fc1b7-50ff-460a-841c-740b06844a46",
          "title": "users functional test",
          "fullFile": "D:\\Work\\test_api2\\test\\add.js",
          "file": "\\test\\add.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "GET /users",
              "fullTitle": "users functional test GET /users",
              "timedOut": false,
              "duration": 373,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.get(\"/users\");\n\n// Assertion\nexpect(res.status).to.equal(200);\nexpect(res.body).to.be.an(\"array\");\nconsole.log(res.body);",
              "err": {},
              "uuid": "76471a8d-64f4-41cd-a684-73636d0c683e",
              "parentUUID": "2e7fc1b7-50ff-460a-841c-740b06844a46",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET /users with id",
              "fullTitle": "users functional test GET /users with id",
              "timedOut": false,
              "duration": 172,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const userId = 7563759; // Ganti dengan ID yang valid\nconst res = await request.get(`/users?id=${userId}`);\n    \nconsole.log(\"Status:\", res.status);\nconsole.log(\"Response Body:\", res.body);\n    \n// Tangani jika respons kosong\nif (res.body.length === 0) {\n    console.warn(`No users found with id=${userId}`);\n} else {\n    // Periksa apakah respons berupa array atau objek\n    if (Array.isArray(res.body)) {\n        expect(res.body).to.be.an(\"array\").that.is.not.empty;\n        expect(res.body[0]).to.have.property(\"id\", userId); // Periksa ID pertama dalam array\n    } else {\n        expect(res.body).to.be.an(\"object\").that.has.property(\"id\");\n        expect(res.body.id).to.equal(userId);\n    }\n}",
              "err": {},
              "uuid": "ff1a2af4-b128-4271-9a1c-d07fc4e23552",
              "parentUUID": "2e7fc1b7-50ff-460a-841c-740b06844a46",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET /users with gender",
              "fullTitle": "users functional test GET /users with gender",
              "timedOut": false,
              "duration": 195,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usersgender = \"female\"; // Contoh gender\nconst res = await request.get(`/users?gender=${usersgender}`);\n\n// Log respons untuk debugging\nconsole.log(res.body);\n// Periksa status kode\nexpect(res.status).to.equal(200);\n// Periksa apakah respons berupa array atau objek\nif (Array.isArray(res.body)) {\n    expect(res.body).to.be.an(\"array\").that.is.not.empty;\n} else {\n    expect(res.body).to.be.an(\"object\").that.has.property(\"id\");\n    expect(res.body.id).to.equal(usersgender);\n}",
              "err": {},
              "uuid": "d9c8e70b-dd6c-4001-88cf-ff5d9940bb4f",
              "parentUUID": "2e7fc1b7-50ff-460a-841c-740b06844a46",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET /users with gender & status",
              "fullTitle": "users functional test GET /users with gender & status",
              "timedOut": false,
              "duration": 280,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usersgender = \"female\"; // Contoh gender\nconst usersstatus = \"active\"; // Contoh status\nconst res = await request.get(`/users?gender=${usersgender}&status=${usersstatus}`);\n\n// Log respons untuk debugging\nconsole.log(\"Response Body:\", res.body);\n// Periksa apakah respons berupa array atau objek\nexpect(res.status).to.equal(200);\nif (res.body.length === 0) {\n    console.warn(\"No users found with the given filters.\");\n} else {\n    expect(res.body).to.be.an(\"array\").that.is.not.empty;\n    res.body.forEach(user => {\n        expect(user).to.have.property(\"gender\", usersgender);\n        expect(user).to.have.property(\"status\", usersstatus);\n    });\n}",
              "err": {},
              "uuid": "b5e22436-cf8a-4636-9dbe-c64c9bbfb226",
              "parentUUID": "2e7fc1b7-50ff-460a-841c-740b06844a46",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET /users last added",
              "fullTitle": "users functional test GET /users last added",
              "timedOut": false,
              "duration": 297,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.get(\"/users\").set(\"Authorization\", `Bearer ${token}`);\n    \n// Log respons untuk debugging\nconsole.log(\"Response Body:\", res.body);\n    \n// Pastikan respons adalah array\nexpect(res.status).to.equal(200);\nexpect(res.body).to.be.an(\"array\").that.is.not.empty;\n    \n// Cari user dengan ID terbesar\nconst userslastid = res.body.reduce((prev, current) => {\n    return current.id > prev.id ? current : prev;\n});\n    \nconsole.log(\"id User terakhir: \", userslastid);\n    \n// Verifikasi hasil\nexpect(userslastid).to.have.property(\"id\");\nexpect(userslastid).to.have.property(\"name\");",
              "err": {},
              "uuid": "1e33513c-c3d1-44f0-a42f-6b173ff8fee1",
              "parentUUID": "2e7fc1b7-50ff-460a-841c-740b06844a46",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET /with invalid link url",
              "fullTitle": "users functional test GET /with invalid link url",
              "timedOut": false,
              "duration": 266,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.get(\"/user\").set(\"Authorization\", `Bearer ${token}`);\n\n// Assertions\nif (Object.keys(res.body).length > 0) {\n    expect(res.body).to.have.property(\"error\");\n    expect(res.body.error).to.include(\"Not Found\");\n} else {\n    console.log(\"Empty response body\");\n    expect(res.body).to.be.empty;\n}",
              "err": {},
              "uuid": "cc06b9ca-92b9-4727-8729-fbe596092fd6",
              "parentUUID": "2e7fc1b7-50ff-460a-841c-740b06844a46",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST /add users ",
              "fullTitle": "users functional test POST /add users ",
              "timedOut": false,
              "duration": 313,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const email = `test${Date.now()}@mailservice.com`; // Email unik\n    const name = `Test Pride ${Date.now()}`; //nama unik\n    const data = {\n        email: email,\n        name: name,\n        gender: \"male\",\n        status: \"active\",\n    };\n\n    const res = await request\n        .post(\"/users\")\n        .set(\"Authorization\", `Bearer ${token}`) // Format token yang benar\n        .set(\"Content-Type\", \"application/json\")\n        .send(data);\n\n    console.log(\"Status:\", res.status);\n    console.log(\"Response Body:\", res.body);\n\n    // Verifikasi respons\n    expect(res.status).to.equal(201); // 201 Created\n    expect(res.body).to.have.property(\"id\");\n    expect(res.body.email).to.equal(data.email);\n    expect(res.body.name).to.equal(data.name);\n    expect(res.body.gender).to.equal(data.gender);\n    expect(res.body.status).to.equal(data.status);",
              "err": {},
              "uuid": "8c98d747-5fb8-4aea-8948-0610f63ced19",
              "parentUUID": "2e7fc1b7-50ff-460a-841c-740b06844a46",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PUT /update users with id",
              "fullTitle": "users functional test PUT /update users with id",
              "timedOut": false,
              "duration": 294,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const name = `Test Pride ${Date.now()}`;\n     const email = `test${Date.now()}@mailservice.com`;\n     const data = {\n         status: \"active\",\n         name: name,\n         email: email\n     };\n     \n     const res = await request\n         .put(\"/users/7549080\")\n         .set(\"Authorization\", `Bearer ${token}`) // Format token yang benar\n         .set(\"Content-Type\", \"application/json\")\n         .send(data);\n     \n     console.log(\"Response Body:\", res.body);",
              "err": {},
              "uuid": "6dfb41e9-9962-4d2f-9309-534890917a5e",
              "parentUUID": "2e7fc1b7-50ff-460a-841c-740b06844a46",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "76471a8d-64f4-41cd-a684-73636d0c683e",
            "ff1a2af4-b128-4271-9a1c-d07fc4e23552",
            "d9c8e70b-dd6c-4001-88cf-ff5d9940bb4f",
            "b5e22436-cf8a-4636-9dbe-c64c9bbfb226",
            "1e33513c-c3d1-44f0-a42f-6b173ff8fee1",
            "cc06b9ca-92b9-4727-8729-fbe596092fd6",
            "8c98d747-5fb8-4aea-8948-0610f63ced19",
            "6dfb41e9-9962-4d2f-9309-534890917a5e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2190,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}